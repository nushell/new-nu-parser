---
source: src/test.rs
expression: evaluate_example(path)
input_file: tests/let_mismatch.nu
---
==== COMPILER ====
0: Variable (4 to 5) "x"
1: Name (7 to 13) "number"
2: Type { name: NodeId(1), params: None, optional: false } (7 to 13)
3: Int (16 to 18)
4: Let { variable_name: NodeId(0), ty: Some(NodeId(2)), initializer: NodeId(3), is_mutable: false } (0 to 18)
5: Variable (32 to 33) "y"
6: Name (35 to 38) "any"
7: Type { name: NodeId(6), params: None, optional: false } (35 to 38)
8: String (41 to 47)
9: Let { variable_name: NodeId(5), ty: Some(NodeId(7)), initializer: NodeId(8), is_mutable: false } (28 to 47)
10: Variable (60 to 61) "z"
11: Name (63 to 69) "string"
12: Type { name: NodeId(11), params: None, optional: false } (63 to 69)
13: Int (72 to 75)
14: Let { variable_name: NodeId(10), ty: Some(NodeId(12)), initializer: NodeId(13), is_mutable: false } (56 to 75)
15: Block(BlockId(0)) (0 to 86)
==== SCOPE ====
0: Frame Scope, variables: [ x: NodeId(0), y: NodeId(5), z: NodeId(10) ], node_id: NodeId(15)
==== TYPES ====
0: number
1: unknown
2: number
3: int
4: ()
5: any
6: unknown
7: any
8: string
9: ()
10: string
11: unknown
12: string
13: int
14: ()
15: ()
==== TYPE ERRORS ====
Error (NodeId 13): initializer does not match declared type
