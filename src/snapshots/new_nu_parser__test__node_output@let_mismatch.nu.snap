---
source: src/test.rs
expression: evaluate_example(path)
input_file: tests/let_mismatch.nu
snapshot_kind: text
---
==== COMPILER ====
0: Variable (4 to 5) "x"
1: Name (7 to 13) "number"
2: Type { name: NodeId(1), params: None, optional: false } (7 to 13)
3: Int (16 to 18) "10"
4: Let { variable_name: NodeId(0), ty: Some(NodeId(2)), initializer: NodeId(3), is_mutable: false } (0 to 18)
5: Variable (32 to 33) "y"
6: Name (35 to 38) "any"
7: Type { name: NodeId(6), params: None, optional: false } (35 to 38)
8: String (41 to 47) ""spam""
9: Let { variable_name: NodeId(5), ty: Some(NodeId(7)), initializer: NodeId(8), is_mutable: false } (28 to 47)
10: Variable (60 to 61) "z"
11: Name (63 to 69) "string"
12: Type { name: NodeId(11), params: None, optional: false } (63 to 69)
13: Int (72 to 75) "123"
14: Let { variable_name: NodeId(10), ty: Some(NodeId(12)), initializer: NodeId(13), is_mutable: false } (56 to 75)
15: Variable (91 to 92) "w"
16: Name (94 to 98) "list"
17: Name (99 to 103) "list"
18: Name (104 to 107) "int"
19: Type { name: NodeId(18), params: None, optional: false } (104 to 107)
20: Params([NodeId(19)]) (103 to 108)
21: Type { name: NodeId(17), params: Some(NodeId(20)), optional: false } (99 to 103)
22: Params([NodeId(21)]) (98 to 109)
23: Type { name: NodeId(16), params: Some(NodeId(22)), optional: false } (94 to 98)
24: String (116 to 119) "'a'"
25: List([NodeId(24)]) (114 to 120)
26: List([NodeId(25)]) (112 to 122)
27: Let { variable_name: NodeId(15), ty: Some(NodeId(23)), initializer: NodeId(26), is_mutable: false } (87 to 122)
28: Block(BlockId(0)) (0 to 124)
==== SCOPE ====
0: Frame Scope, node_id: NodeId(28)
  variables: [ w: NodeId(15), x: NodeId(0), y: NodeId(5), z: NodeId(10) ]
==== TYPES ====
0: number
1: unknown
2: number
3: int
4: ()
5: any
6: unknown
7: any
8: string
9: ()
10: string
11: unknown
12: string
13: int
14: ()
15: list<list<int>>
16: unknown
17: unknown
18: unknown
19: int
20: forbidden
21: list<int>
22: forbidden
23: list<list<int>>
24: string
25: list<string>
26: list<list<string>>
27: ()
28: ()
==== TYPE ERRORS ====
Error (NodeId 13): initializer does not match declared type
Error (NodeId 26): initializer does not match declared type
==== IR ====
register_count: 2
file_count: 2
0: LoadLiteral { dst: RegId(0), lit: Int(10) }
1: LoadLiteral { dst: RegId(1), lit: Int(123) }
2: Return { src: RegId(0) }
==== IR ERRORS ====
Error (NodeId 0): node Variable not suported yet
Error (NodeId 1): node Name not suported yet
Error (NodeId 2): node Type { name: NodeId(1), params: None, optional: false } not suported yet
Error (NodeId 4): node Let { variable_name: NodeId(0), ty: Some(NodeId(2)), initializer: NodeId(3), is_mutable: false } not suported yet
Error (NodeId 5): node Variable not suported yet
Error (NodeId 6): node Name not suported yet
Error (NodeId 7): node Type { name: NodeId(6), params: None, optional: false } not suported yet
Error (NodeId 8): node String not suported yet
Error (NodeId 9): node Let { variable_name: NodeId(5), ty: Some(NodeId(7)), initializer: NodeId(8), is_mutable: false } not suported yet
Error (NodeId 10): node Variable not suported yet
Error (NodeId 11): node Name not suported yet
Error (NodeId 12): node Type { name: NodeId(11), params: None, optional: false } not suported yet
Error (NodeId 14): node Let { variable_name: NodeId(10), ty: Some(NodeId(12)), initializer: NodeId(13), is_mutable: false } not suported yet
Error (NodeId 15): node Variable not suported yet
Error (NodeId 16): node Name not suported yet
Error (NodeId 17): node Name not suported yet
Error (NodeId 18): node Name not suported yet
Error (NodeId 19): node Type { name: NodeId(18), params: None, optional: false } not suported yet
Error (NodeId 20): node Params([NodeId(19)]) not suported yet
Error (NodeId 21): node Type { name: NodeId(17), params: Some(NodeId(20)), optional: false } not suported yet
Error (NodeId 22): node Params([NodeId(21)]) not suported yet
Error (NodeId 23): node Type { name: NodeId(16), params: Some(NodeId(22)), optional: false } not suported yet
Error (NodeId 24): node String not suported yet
Error (NodeId 25): node List([NodeId(24)]) not suported yet
Error (NodeId 26): node List([NodeId(25)]) not suported yet
Error (NodeId 27): node Let { variable_name: NodeId(15), ty: Some(NodeId(23)), initializer: NodeId(26), is_mutable: false } not suported yet
Error (NodeId 28): node Block(BlockId(0)) not suported yet
