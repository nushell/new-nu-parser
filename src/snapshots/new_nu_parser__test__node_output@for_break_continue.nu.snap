---
source: src/test.rs
expression: evaluate_example(path)
input_file: tests/for_break_continue.nu
---
==== COMPILER ====
0: Variable (4 to 5) "x"
1: Int (8 to 9)
2: Let { variable_name: NodeId(0), ty: None, initializer: NodeId(1), is_mutable: true } (0 to 9)
3: Variable (14 to 15) "i"
4: Int (20 to 21)
5: Int (22 to 23)
6: Int (24 to 25)
7: List([NodeId(4), NodeId(5), NodeId(6)]) (19 to 25)
8: Variable (36 to 38) "$x"
9: GreaterThan (39 to 40)
10: Int (41 to 42)
11: BinaryOp { lhs: NodeId(8), op: NodeId(9), rhs: NodeId(10) } (36 to 42)
12: Break (53 to 58)
13: Block(BlockId(0)) (43 to 64)
14: If { condition: NodeId(11), then_block: NodeId(13), else_block: None } (33 to 64)
15: Variable (73 to 75) "$i"
16: LessThan (76 to 77)
17: Int (78 to 79)
18: BinaryOp { lhs: NodeId(15), op: NodeId(16), rhs: NodeId(17) } (73 to 79)
19: Continue (90 to 98)
20: Block(BlockId(1)) (80 to 104)
21: If { condition: NodeId(18), then_block: NodeId(20), else_block: None } (70 to 104)
22: Variable (110 to 112) "$x"
23: Assignment (113 to 114)
24: Variable (115 to 117) "$x"
25: Plus (118 to 119)
26: Variable (120 to 122) "$i"
27: BinaryOp { lhs: NodeId(24), op: NodeId(25), rhs: NodeId(26) } (115 to 122)
28: BinaryOp { lhs: NodeId(22), op: NodeId(23), rhs: NodeId(27) } (110 to 122)
29: Block(BlockId(2)) (27 to 124)
30: For { variable: NodeId(3), range: NodeId(7), block: NodeId(29) } (10 to 124)
31: Block(BlockId(3)) (0 to 124)
==== SCOPE ====
0: Frame Scope, variables: [ x: NodeId(0) ], node_id: NodeId(31)
1: Frame Scope, variables: [ i: NodeId(3) ], node_id: NodeId(29)
2: Frame Scope, variables: [  ], node_id: NodeId(13)
3: Frame Scope, variables: [  ], node_id: NodeId(20)
==== TYPES ====
0: int
1: int
2: ()
3: unknown
4: unknown
5: unknown
6: unknown
7: unknown
8: unknown
9: unknown
10: unknown
11: unknown
12: unknown
13: unknown
14: unknown
15: unknown
16: unknown
17: unknown
18: unknown
19: unknown
20: unknown
21: unknown
22: unknown
23: unknown
24: unknown
25: unknown
26: unknown
27: unknown
28: unknown
29: unknown
30: unknown
31: ()
==== TYPE ERRORS ====
Error (NodeId 30): unsupported ast node 'For { variable: NodeId(3), range: NodeId(7), block: NodeId(29) }' in typechecker
