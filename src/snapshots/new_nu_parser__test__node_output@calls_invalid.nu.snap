---
source: src/test.rs
expression: evaluate_example(path)
input_file: tests/calls_invalid.nu
---
==== COMPILER ====
0: Name (4 to 7) "foo"
1: Name (10 to 11) "a"
2: Name (13 to 16) "int"
3: Type(Ref { name: NodeId(2), args: None, optional: false }) (13 to 16)
4: Param { name: NodeId(1), ty: Some(NodeId(3)) } (10 to 16)
5: Params([NodeId(4)]) (8 to 18)
6: Expr(Block(BlockId(0))) (19 to 21)
7: Stmt(Def { name: NodeId(0), type_params: None, params: NodeId(5), in_out_types: None, block: NodeId(6) }) (0 to 21)
8: Name (22 to 25) "foo"
9: Expr(Int) (26 to 27) "1"
10: Expr(Int) (28 to 29) "2"
11: Expr(Call { parts: [NodeId(8), NodeId(9), NodeId(10)] }) (26 to 29)
12: Name (30 to 33) "foo"
13: Expr(String) (34 to 42) ""string""
14: Expr(Call { parts: [NodeId(12), NodeId(13)] }) (34 to 42)
15: Expr(Block(BlockId(1))) (0 to 43)
==== SCOPE ====
0: Frame Scope, node_id: NodeId(15)
      decls: [ foo: NodeId(0) ]
1: Frame Scope, node_id: NodeId(6)
  variables: [ a: NodeId(1) ]
==== TYPES ====
0: unknown
1: unknown
2: unknown
3: int
4: int
5: forbidden
6: ()
7: ()
8: unknown
9: int
10: unknown
11: ()
12: unknown
13: string
14: ()
15: ()
==== TYPE ERRORS ====
Error (NodeId 11): Expected 1 argument(s), got 2
Error (NodeId 13): Expected int, got string
==== IR ====
register_count: 0
file_count: 0
==== IR ERRORS ====
Error (NodeId 7): node Stmt(Def { name: NodeId(0), type_params: None, params: NodeId(5), in_out_types: None, block: NodeId(6) }) not suported yet
