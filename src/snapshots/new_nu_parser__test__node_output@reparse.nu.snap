---
source: src/test.rs
expression: evaluate_example(path)
input_file: tests/reparse.nu
snapshot_kind: text
---
==== COMPILER ====
0: Variable (4 to 5) "x"
1: Name (10 to 11) "a"
2: Param { name: NodeId(1), ty: None } (10 to 11)
3: Params([NodeId(2)]) (9 to 12)
4: Variable (13 to 15) "$a"
5: Block(BlockId(0)) (13 to 16)
6: Closure { params: Some(NodeId(3)), block: NodeId(5) } (8 to 17)
7: Let { variable_name: NodeId(0), ty: None, initializer: NodeId(6), is_mutable: false } (0 to 17)
8: Variable (22 to 23) "y"
9: String (28 to 29) "a"
10: String (31 to 32) "b"
11: Record { pairs: [(NodeId(9), NodeId(10))] } (26 to 34)
12: Let { variable_name: NodeId(8), ty: None, initializer: NodeId(11), is_mutable: false } (18 to 34)
13: Block(BlockId(1)) (0 to 34)
==== SCOPE ====
0: Frame Scope, node_id: NodeId(13)
  variables: [ x: NodeId(0), y: NodeId(8) ]
1: Frame Scope, node_id: NodeId(5)
  variables: [ a: NodeId(1) ]
==== TYPES ====
0: closure
1: unknown
2: any
3: forbidden
4: unknown
5: unknown
6: closure
7: ()
8: record<a: string>
9: unknown
10: string
11: record<a: string>
12: ()
13: ()
==== IR ====
register_count: 0
file_count: 0
==== IR ERRORS ====
Error (NodeId 7): node Let { variable_name: NodeId(0), ty: None, initializer: NodeId(6), is_mutable: false } not suported yet
