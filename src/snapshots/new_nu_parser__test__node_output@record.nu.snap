---
source: src/test.rs
expression: evaluate_example(path)
input_file: tests/record.nu
snapshot_kind: text
---
==== COMPILER ====
0: String (1 to 2) "a"
1: Int (4 to 5) "1"
2: String (7 to 8) "b"
3: Int (10 to 11) "2"
4: Record { pairs: [(NodeId(0), NodeId(1)), (NodeId(2), NodeId(3))] } (0 to 12)
5: Block(BlockId(0)) (0 to 13)
==== SCOPE ====
0: Frame Scope, node_id: NodeId(5) (empty)
==== TYPES ====
0: unknown
1: unknown
2: unknown
3: unknown
4: unknown
5: unknown
==== TYPE ERRORS ====
Error (NodeId 4): unsupported ast node 'Record { pairs: [(NodeId(0), NodeId(1)), (NodeId(2), NodeId(3))] }' in typechecker
==== IR ====
register_count: 2
file_count: 2
0: LoadLiteral { dst: RegId(0), lit: Int(1) }
1: LoadLiteral { dst: RegId(1), lit: Int(2) }
2: Return { src: RegId(0) }
==== IR ERRORS ====
Error (NodeId 0): node String not suported yet
Error (NodeId 2): node String not suported yet
Error (NodeId 4): node Record { pairs: [(NodeId(0), NodeId(1)), (NodeId(2), NodeId(3))] } not suported yet
Error (NodeId 5): node Block(BlockId(0)) not suported yet
