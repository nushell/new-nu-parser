---
source: src/test.rs
expression: evaluate_example(path)
input_file: tests/binary_ops_subtypes.nu
---
==== COMPILER ====
0: Expr(Int) (0 to 1) "1"
1: Equal (2 to 4)
2: Expr(Float) (5 to 8) "1.0"
3: Expr(BinaryOp { lhs: NodeId(0), op: NodeId(1), rhs: NodeId(2) }) (0 to 8)
4: Expr(String) (9 to 12) ""a""
5: Equal (13 to 15)
6: Expr(Float) (16 to 19) "1.0"
7: Expr(BinaryOp { lhs: NodeId(4), op: NodeId(5), rhs: NodeId(6) }) (9 to 19)
8: Expr(Int) (20 to 21) "1"
9: Plus (22 to 23)
10: Expr(Float) (24 to 27) "1.0"
11: Expr(BinaryOp { lhs: NodeId(8), op: NodeId(9), rhs: NodeId(10) }) (20 to 27)
12: Expr(Int) (29 to 30) "1"
13: Expr(List([NodeId(12)])) (28 to 30)
14: Append (32 to 34)
15: Expr(Float) (35 to 38) "1.0"
16: Expr(BinaryOp { lhs: NodeId(13), op: NodeId(14), rhs: NodeId(15) }) (28 to 38)
17: Expr(Float) (40 to 43) "1.0"
18: Expr(Int) (44 to 45) "1"
19: Expr(List([NodeId(17), NodeId(18)])) (39 to 45)
20: Append (47 to 49)
21: Expr(String) (50 to 53) ""a""
22: Expr(BinaryOp { lhs: NodeId(19), op: NodeId(20), rhs: NodeId(21) }) (39 to 53)
23: Expr(Int) (56 to 57) "1"
24: Expr(List([NodeId(23)])) (55 to 57)
25: Expr(Int) (60 to 61) "2"
26: Expr(List([NodeId(25)])) (59 to 61)
27: Expr(List([NodeId(24), NodeId(26)])) (54 to 62)
28: Append (64 to 66)
29: Expr(Int) (69 to 70) "3"
30: Expr(List([NodeId(29)])) (68 to 70)
31: Expr(List([NodeId(30)])) (67 to 71)
32: Expr(BinaryOp { lhs: NodeId(27), op: NodeId(28), rhs: NodeId(31) }) (54 to 71)
33: Expr(Int) (75 to 76) "1"
34: Expr(List([NodeId(33)])) (74 to 76)
35: Expr(Int) (79 to 80) "2"
36: Expr(List([NodeId(35)])) (78 to 80)
37: Expr(List([NodeId(34), NodeId(36)])) (73 to 81)
38: Append (83 to 85)
39: Expr(Float) (88 to 91) "3.0"
40: Expr(List([NodeId(39)])) (87 to 91)
41: Expr(List([NodeId(40)])) (86 to 92)
42: Expr(BinaryOp { lhs: NodeId(37), op: NodeId(38), rhs: NodeId(41) }) (73 to 92)
43: Expr(Int) (94 to 95) "1"
44: In (96 to 98)
45: Expr(Float) (100 to 103) "1.0"
46: Expr(Int) (105 to 106) "1"
47: Expr(List([NodeId(45), NodeId(46)])) (99 to 106)
48: Expr(BinaryOp { lhs: NodeId(43), op: NodeId(44), rhs: NodeId(47) }) (94 to 106)
49: Expr(Float) (108 to 111) "2.3"
50: Modulo (112 to 115)
51: Expr(Int) (116 to 117) "1"
52: Expr(BinaryOp { lhs: NodeId(49), op: NodeId(50), rhs: NodeId(51) }) (108 to 117)
53: Expr(Block(BlockId(0))) (0 to 118)
==== SCOPE ====
0: Frame Scope, node_id: NodeId(53) (empty)
==== TYPES ====
0: int
1: forbidden
2: float
3: bool
4: string
5: forbidden
6: float
7: bool
8: int
9: forbidden
10: float
11: float
12: int
13: list<int>
14: forbidden
15: float
16: list<number>
17: float
18: int
19: list<number>
20: forbidden
21: string
22: list<any>
23: int
24: list<int>
25: int
26: list<int>
27: list<list<int>>
28: forbidden
29: int
30: list<int>
31: list<list<int>>
32: list<list<int>>
33: int
34: list<int>
35: int
36: list<int>
37: list<list<int>>
38: forbidden
39: float
40: list<float>
41: list<list<float>>
42: list<list<number>>
43: int
44: forbidden
45: float
46: int
47: list<number>
48: bool
49: float
50: forbidden
51: int
52: float
53: float
==== IR ====
register_count: 1
file_count: 0
0: LoadLiteral { dst: RegId(0), lit: Int(1) }
==== IR ERRORS ====
Error (NodeId 2): node Expr(Float) not suported yet
