---
source: src/test.rs
expression: evaluate_example(path)
input_file: tests/binary_ops_spaces.nu
---
==== COMPILER ====
0: Expr(Int) (0 to 1) "1"
1: Plus (2 to 3)
2: Expr(Int) (4 to 5) "2"
3: Expr(BinaryOp { lhs: NodeId(0), op: NodeId(1), rhs: NodeId(2) }) (0 to 5)
4: Expr(Int) (6 to 7) "1"
5: Plus (7 to 8)
6: Expr(Int) (9 to 10) "2"
7: Expr(BinaryOp { lhs: NodeId(4), op: NodeId(5), rhs: NodeId(6) }) (6 to 10)
8: Expr(Int) (11 to 12) "1"
9: Plus (13 to 14)
10: Expr(Int) (14 to 15) "2"
11: Expr(BinaryOp { lhs: NodeId(8), op: NodeId(9), rhs: NodeId(10) }) (11 to 15)
12: Expr(Int) (16 to 17) "1"
13: Plus (17 to 18)
14: Expr(Int) (18 to 19) "2"
15: Expr(BinaryOp { lhs: NodeId(12), op: NodeId(13), rhs: NodeId(14) }) (16 to 19)
16: Expr(Block(BlockId(0))) (0 to 20)
==== COMPILER ERRORS ====
Error (NodeId 5): missing space before operator
Error (NodeId 9): missing space after operator
Error (NodeId 13): missing space before operator
Error (NodeId 13): missing space after operator
