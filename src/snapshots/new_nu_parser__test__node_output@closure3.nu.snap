---
source: src/test.rs
expression: evaluate_example(path)
input_file: tests/closure3.nu
snapshot_kind: text
---
==== COMPILER ====
0: Variable (4 to 11) "closure"
1: Name (16 to 17) "a"
2: Name (19 to 22) "int"
3: Type { name: NodeId(2), params: None, optional: false } (19 to 22)
4: Param { name: NodeId(1), ty: Some(NodeId(3)) } (16 to 22)
5: Name (24 to 25) "b"
6: Name (27 to 30) "int"
7: Type { name: NodeId(6), params: None, optional: false } (27 to 30)
8: Param { name: NodeId(5), ty: Some(NodeId(7)) } (24 to 30)
9: Params([NodeId(4), NodeId(8)]) (15 to 31)
10: Variable (32 to 34) "$a"
11: Plus (35 to 36)
12: Variable (37 to 39) "$b"
13: LessThan (40 to 41)
14: Int (42 to 43) "5"
15: BinaryOp { lhs: NodeId(10), op: NodeId(11), rhs: NodeId(12) } (32 to 39)
16: BinaryOp { lhs: NodeId(15), op: NodeId(13), rhs: NodeId(14) } (32 to 43)
17: Block(BlockId(0)) (32 to 43)
18: Closure { params: Some(NodeId(9)), block: NodeId(17) } (14 to 44)
19: Let { variable_name: NodeId(0), ty: None, initializer: NodeId(18), is_mutable: false } (0 to 44)
20: Name (46 to 52) "filter"
21: Variable (53 to 61) "$closure"
22: Call { parts: [NodeId(20), NodeId(21)] } (53 to 61)
23: Block(BlockId(1)) (0 to 62)
==== SCOPE ====
0: Frame Scope, node_id: NodeId(23)
  variables: [ closure: NodeId(0) ]
1: Frame Scope, node_id: NodeId(17)
  variables: [ a: NodeId(1), b: NodeId(5) ]
==== TYPES ====
0: closure
1: unknown
2: unknown
3: int
4: int
5: unknown
6: unknown
7: int
8: int
9: forbidden
10: int
11: forbidden
12: int
13: forbidden
14: int
15: int
16: bool
17: bool
18: closure
19: ()
20: unknown
21: closure
22: stream<binary>
23: stream<binary>
