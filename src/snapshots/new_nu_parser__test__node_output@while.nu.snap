---
source: src/test.rs
expression: evaluate_example(path)
input_file: tests/while.nu
---
==== COMPILER ====
0: VarDecl (4 to 5) "x"
1: Expr(Int) (8 to 9) "0"
2: Stmt(Let { variable_name: NodeId(0), ty: None, initializer: NodeId(1), is_mutable: true }) (0 to 9)
3: Expr(Int) (16 to 17) "1"
4: LessThan (18 to 19)
5: Expr(Int) (20 to 21) "2"
6: Expr(BinaryOp { lhs: NodeId(3), op: NodeId(4), rhs: NodeId(5) }) (16 to 21)
7: Expr(VarRef) (26 to 28) "$x"
8: AddAssignment (29 to 31)
9: Expr(Int) (32 to 33) "1"
10: Expr(BinaryOp { lhs: NodeId(7), op: NodeId(8), rhs: NodeId(9) }) (26 to 33)
11: Expr(Block(BlockId(0))) (22 to 35)
12: Stmt(While { condition: NodeId(6), block: NodeId(11) }) (10 to 35)
13: Expr(Block(BlockId(1))) (0 to 36)
==== SCOPE ====
0: Frame Scope, node_id: NodeId(13)
  variables: [ x: NodeId(0) ]
1: Frame Scope, node_id: NodeId(11) (empty)
==== TYPES ====
0: int
1: int
2: ()
3: int
4: forbidden
5: int
6: bool
7: int
8: forbidden
9: int
10: ()
11: ()
12: ()
13: ()
==== IR ====
register_count: 0
file_count: 0
==== IR ERRORS ====
Error (NodeId 2): node Stmt(Let { variable_name: NodeId(0), ty: None, initializer: NodeId(1), is_mutable: true }) not suported yet
