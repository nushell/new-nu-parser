---
source: src/test.rs
expression: evaluate_example(path)
input_file: tests/binary_ops_exact.nu
---
==== COMPILER ====
0: Expr(Int) (0 to 1) "1"
1: Equal (2 to 4)
2: Expr(Int) (5 to 6) "1"
3: Expr(BinaryOp { lhs: NodeId(0), op: NodeId(1), rhs: NodeId(2) }) (0 to 6)
4: Expr(True) (8 to 12)
5: Expr(List([NodeId(4)])) (7 to 12)
6: Append (14 to 16)
7: Expr(False) (17 to 22)
8: Expr(BinaryOp { lhs: NodeId(5), op: NodeId(6), rhs: NodeId(7) }) (7 to 22)
9: Expr(Int) (23 to 24) "1"
10: Plus (25 to 26)
11: Expr(Int) (27 to 28) "1"
12: Expr(BinaryOp { lhs: NodeId(9), op: NodeId(10), rhs: NodeId(11) }) (23 to 28)
13: Expr(Float) (29 to 32) "1.0"
14: Plus (33 to 34)
15: Expr(Float) (35 to 38) "1.0"
16: Expr(BinaryOp { lhs: NodeId(13), op: NodeId(14), rhs: NodeId(15) }) (29 to 38)
17: Expr(True) (39 to 43)
18: And (44 to 47)
19: Expr(False) (48 to 53)
20: Expr(BinaryOp { lhs: NodeId(17), op: NodeId(18), rhs: NodeId(19) }) (39 to 53)
21: Expr(String) (54 to 59) ""foo""
22: RegexMatch (60 to 62)
23: Expr(String) (63 to 68) "".*o""
24: Expr(BinaryOp { lhs: NodeId(21), op: NodeId(22), rhs: NodeId(23) }) (54 to 68)
25: Expr(Int) (69 to 70) "1"
26: In (71 to 73)
27: Expr(Int) (75 to 76) "1"
28: Expr(Int) (78 to 79) "2"
29: Expr(List([NodeId(27), NodeId(28)])) (74 to 79)
30: Expr(BinaryOp { lhs: NodeId(25), op: NodeId(26), rhs: NodeId(29) }) (69 to 79)
31: Expr(Block(BlockId(0))) (0 to 81)
==== SCOPE ====
0: Frame Scope, node_id: NodeId(31) (empty)
==== TYPES ====
0: int
1: forbidden
2: int
3: bool
4: bool
5: list<bool>
6: forbidden
7: bool
8: list<bool>
9: int
10: forbidden
11: int
12: int
13: float
14: forbidden
15: float
16: float
17: bool
18: forbidden
19: bool
20: bool
21: string
22: forbidden
23: string
24: bool
25: int
26: forbidden
27: int
28: int
29: list<int>
30: bool
31: bool
==== IR ====
register_count: 2
file_count: 0
0: LoadLiteral { dst: RegId(0), lit: Int(1) }
1: LoadLiteral { dst: RegId(1), lit: Int(1) }
==== IR ERRORS ====
Error (NodeId 1): unrecognized operator Equal
