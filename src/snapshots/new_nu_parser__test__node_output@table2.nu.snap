---
source: src/test.rs
expression: evaluate_example(path)
input_file: tests/table2.nu
snapshot_kind: text
---
==== COMPILER ====
0: String (7 to 8) "a"
1: String (10 to 11) "b"
2: List([NodeId(0), NodeId(1)]) (6 to 11)
3: Int (20 to 21) "1"
4: Int (23 to 24) "2"
5: List([NodeId(3), NodeId(4)]) (19 to 24)
6: Int (31 to 32) "3"
7: Int (34 to 35) "4"
8: List([NodeId(6), NodeId(7)]) (30 to 35)
9: Table { header: NodeId(2), rows: [NodeId(5), NodeId(8)] } (0 to 37)
10: Block(BlockId(0)) (0 to 38)
==== SCOPE ====
0: Frame Scope, node_id: NodeId(10) (empty)
==== TYPES ====
0: unknown
1: unknown
2: unknown
3: unknown
4: unknown
5: unknown
6: unknown
7: unknown
8: unknown
9: unknown
10: unknown
==== TYPE ERRORS ====
Error (NodeId 9): unsupported ast node 'Table { header: NodeId(2), rows: [NodeId(5), NodeId(8)] }' in typechecker
==== IR ====
register_count: 4
file_count: 4
0: LoadLiteral { dst: RegId(0), lit: Int(1) }
1: LoadLiteral { dst: RegId(1), lit: Int(2) }
2: LoadLiteral { dst: RegId(2), lit: Int(3) }
3: LoadLiteral { dst: RegId(3), lit: Int(4) }
4: Return { src: RegId(0) }
==== IR ERRORS ====
Error (NodeId 0): node String not suported yet
Error (NodeId 1): node String not suported yet
Error (NodeId 2): node List([NodeId(0), NodeId(1)]) not suported yet
Error (NodeId 5): node List([NodeId(3), NodeId(4)]) not suported yet
Error (NodeId 8): node List([NodeId(6), NodeId(7)]) not suported yet
Error (NodeId 9): node Table { header: NodeId(2), rows: [NodeId(5), NodeId(8)] } not suported yet
Error (NodeId 10): node Block(BlockId(0)) not suported yet
